---
title: "Data Import"
author: "Quoc Anh Doan"
format: 
  html:
    toc: true
    toc-depth: 5

editor: visual 
---

## Setup

### Set the Seed for reproducibility

```{r}
set.seed(123)
```

### library

```{r}
library(tidyverse)
```

## Import

```{r}
submission_format <- read_csv("data/given_data/submission_format.csv")
test_set_features <- read_csv("data/given_data/test_set_features.csv")
training_set_features <- read_csv("data/given_data/training_set_features.csv")
training_set_labels <- read_csv("data/given_data/training_set_labels.csv")
```

## Clean Column Names

```{r}
submission_format <- 
  submission_format |>
  janitor::clean_names()
  
test_set_features <-
  test_set_features |>
  janitor::clean_names()

training_set_features <- 
  training_set_features |>
  janitor::clean_names()

training_set_labels <- 
  training_set_labels |> 
  janitor::clean_names()
```

------------------------------------------------------------------------

## Data Column Format

### `submission_format` Dataset

```{r}
spec(submission_format)
```

`respondent_id` doesn't represent anything numerically. It's like car license plate or social security number. It should be `col_character()`.

The format for the submission file is three columns: `respondent_id`, `h1n1_vaccine`, and `seasonal_vaccine`. The predictions for the two target variables should be float probabilities that range between 0.0 and 1.0. Because the competition uses ROC AUC as its evaluation metric, the values you submit must be the probabilities that a person received each vaccine, not binary labels.

So the column type for `h1n1_vaccine` and `seasonal_vaccine` should be `col_double()`.

#### Setting Column Type for `submission_format` Dataset

```{r}
submission_format <- read_csv(
  "data/given_data/submission_format.csv",
  col_types = list(  
    respondent_id = col_character(),
    h1n1_vaccine = col_double(),
    seasonal_vaccine = col_double()
))
```

Double check that the format is correct:

```{r}
spec(submission_format)
```

Good.

------------------------------------------------------------------------

### `test_set_features` Dataset

```{r}
spec(test_set_features)
```

#### The features in this dataset

You are provided a dataset with 36 columns. The first column respondent_id is a unique and random identifier. The remaining 35 features are described below.

Check that it's 36 columns:

```{r}
ncol(test_set_features)
```

For all binary variables: `0` = No; `1` = Yes.

-   `h1n1_concern` - Level of concern about the H1N1 flu.
    -   `0` = Not at all concerned
    -   `1` = Not very concerned
    -   `2` = Somewhat concerned
    -   `3` = Very concerned
-   `h1n1_knowledge` - Level of knowledge about H1N1 flu.
    -   `0` = No knowledge
    -   `1` = A little knowledge
    -   `2` = A lot of knowledge
-   `behavioral_antiviral_meds` - Has taken antiviral medications. (*binary*)
-   `behavioral_avoidance` - Has avoided close contact with others with flu-like symptoms. (*binary*)
-   `behavioral_face_mask` - Has bought a face mask. (*binary*)
-   `behavioral_wash_hands` - Has frequently washed hands or used hand sanitizer. (*binary*)
-   `behavioral_large_gatherings` - Has reduced time at large gatherings. (*binary*)
-   `behavioral_outside_home` - Has reduced contact with people outside of own household. (*binary*)
-   `behavioral_touch_face` - Has avoided touching eyes, nose, or mouth. (*binary*)
-   `doctor_recc_h1n1` - H1N1 flu vaccine was recommended by doctor. (*binary*)
-   `doctor_recc_seasonal` - Seasonal flu vaccine was recommended by doctor. (*binary*)
-   `chronic_med_condition` - Has any of the following chronic medical conditions: asthma or an other lung condition, diabetes, a heart condition, a kidney condition, sickle cell anemia or other anemia, a neurological or neuromuscular condition, a liver condition, or a weakened immune system caused by a chronic illness or by medicines taken for a chronic illness. (*binary*)
-   `child_under_6_months` - Has regular close contact with a child under the age of six months. (*binary*)
-   `health_worker` - Is a healthcare worker. (*binary*)
-   `health_insurance` - Has health insurance. (*binary*)
-   `opinion_h1n1_vacc_effective` - Respondent's opinion about H1N1 vaccine effectiveness.
    -   `1` = Not at all effective
    -   `2` = Not very effective
    -   `3` = Don't know
    -   `4` = Somewhat effective
    -   `5` = Very effective
-   `opinion_h1n1_risk` - Respondent's opinion about risk of getting sick with H1N1 flu without vaccine.
    -   `1` = Very Low
    -   `2` = Somewhat low
    -   `3` = Don't know
    -   `4` = Somewhat high
    -   `5` = Very high
-   `opinion_h1n1_sick_from_vacc` - Respondent's worry of getting sick from taking H1N1 vaccine.
    -   `1` = Not at all worried
    -   `2` = Not very worried
    -   `3` = Don't know
    -   `4` = Somewhat worried
    -   `5` = Very worried
-   `opinion_seas_vacc_effective` - Respondent's opinion about seasonal flu vaccine effectiveness.
    -   `1` = Not at all effective
    -   `2` = Not very effective
    -   `3` = Don't know
    -   `4` = Somewhat effective
    -   `5` = Very effective
-   `opinion_seas_risk` - Respondent's opinion about risk of getting sick with seasonal flu without vaccine.
    -   `1` = Very Low
    -   `2` = Somewhat low
    -   `3` = Don't know
    -   `4` = Somewhat high
    -   `5` = Very high
-   `opinion_seas_sick_from_vacc` - Respondent's worry of getting sick from taking seasonal flu vaccine.
    -   `1` = Not at all worried
    -   `2` = Not very worried
    -   `3` = Don't know
    -   `4` = Somewhat worried
    -   `5` = Very worried
-   `age_group` - Age group of respondent.
-   `education` - Self-reported education level.
-   `race` - Race of respondent.
-   `sex` - Sex of respondent.
-   `income_poverty` - Household annual income of respondent with respect to 2008 Census poverty thresholds.
-   `marital_status` - Marital status of respondent.
-   `rent_or_own` - Housing situation of respondent.
-   `employment_status` - Employment status of respondent.
-   `hhs_geo_region` - Respondent's residence using a 10-region geographic classification defined by the U.S. Dept. of Health and Human Services. Values are represented as short random character strings.
-   `census_msa` - Respondent's residence within metropolitan statistical areas (MSA) as defined by the U.S. Census.
-   `household_adults` - Number of other adults in household, top-coded to 3.
-   `household_children` - Number of children in household, top-coded to 3.
-   `employment_industry` - Type of industry respondent is employed in. Values are represented as short random character strings.
-   `employment_occupation` - Type of occupation of respondent. Values are represented as short random character strings.

#### Setting Column Type for `test_set_features` Dataset

```{r}
test_set_features <- read_csv(
  "data/given_data/test_set_features.csv",
  col_types = list(  
    respondent_id = col_character(),
    h1n1_concern = col_integer(),
    h1n1_knowledge = col_integer(),
    behavioral_antiviral_meds = col_logical(),
    behavioral_avoidance = col_logical(),
    behavioral_face_mask = col_logical(),
    behavioral_wash_hands = col_logical(),
    behavioral_large_gatherings = col_logical(),
    behavioral_outside_home = col_logical(),
    behavioral_touch_face = col_logical(),
    doctor_recc_h1n1 = col_logical(),
    doctor_recc_seasonal = col_logical(),
    chronic_med_condition = col_logical(),
    child_under_6_months = col_logical(),
    health_worker = col_logical(),
    health_insurance = col_logical(),
    opinion_h1n1_vacc_effective = col_integer(),
    opinion_h1n1_risk = col_integer(),
    opinion_h1n1_sick_from_vacc = col_integer(),
    opinion_seas_vacc_effective = col_integer(),
    opinion_seas_risk = col_integer(),
    opinion_seas_sick_from_vacc = col_integer(),
    age_group = col_character(),
    education = col_character(),
    race = col_character(),
    sex = col_character(),
    income_poverty = col_character(),
    marital_status = col_character(),
    rent_or_own = col_character(),
    employment_status = col_character(),
    hhs_geo_region = col_character(),
    census_msa = col_character(),
    household_adults = col_integer(),
    household_children = col_integer(),
    employment_industry = col_character(),
    employment_occupation = col_character()
))
```

#### Do I want these as factors or strings/characters?

-   `hhs_geo_region`
-   `employment_industry`
-   `employment_occupation`

```{r}
test_set_features |>
  distinct(hhs_geo_region)
```

10 regions in a data set of 26,708 rows (including header). Factor is okay.

```{r}
test_set_features |>
  distinct(employment_industry)
```

22 possible values in a dataset with 26,708 rows (including header). Factor is okay.

```{r}
test_set_features |>
  distinct(employment_occupation)
```

24 possible values in a dataset with 26,708 rows (including header). Factor is okay.

#### Set up some factor levels for categorical variables:

##### `h1n1_concern`

-   `h1n1_concern` - Level of concern about the H1N1 flu.
    -   `0` = Not at all concerned
    -   `1` = Not very concerned
    -   `2` = Somewhat concerned
    -   `3` = Very concerned

```{r}
test_set_features |> distinct(h1n1_concern) 

h1n1_concern_levels <- c(
    'Not at all concerned'
    ,'Not very concerned'
    ,'Somewhat concerned'
    ,'Very concerned'
) 

test_set_features <- 
  test_set_features |>
  mutate(h1n1_concern = 
           case_when (
              h1n1_concern == 0 ~ 'Not at all concerned',
              h1n1_concern == 1 ~ 'Not very concerned',
              h1n1_concern == 2 ~ 'Somewhat concerned',
              h1n1_concern == 3 ~ 'Very concerned',
              TRUE ~ as.character(h1n1_concern)
  )) |>
  mutate(h1n1_concern = 
           fct(
             h1n1_concern,
             levels = h1n1_concern_levels
  ))
```

Check works:

```{r}
test_set_features |> count(h1n1_concern)

levels(test_set_features$h1n1_concern)
```

------------------------------------------------------------------------

##### `h1n1_knowledge`

-   `h1n1_knowledge` - Level of knowledge about H1N1 flu.

    -   `0` = No knowledge
    -   `1` = A little knowledge
    -   `2` = A lot of knowledge

    ```{r}
    test_set_features |> distinct(h1n1_knowledge) 

    h1n1_knowledge_levels <- c(
        'No knowledge'
        ,'A little knowledge'
        ,'A lot of knowledge'
    ) 

    test_set_features <- 
      test_set_features |>
      mutate(h1n1_knowledge = 
               case_when (
                  h1n1_knowledge == 0 ~ 'No knowledge',
                  h1n1_knowledge == 1 ~ 'A little knowledge',
                  h1n1_knowledge == 2 ~ 'A lot of knowledge',
                  TRUE ~ as.character(h1n1_knowledge)
      )) |>
      mutate(h1n1_knowledge = 
               fct(
                 h1n1_knowledge,
                 levels = h1n1_knowledge_levels
      ))
    ```

Check works:

```{r}
test_set_features |> count(h1n1_knowledge)

levels(test_set_features$h1n1_knowledge)
```

------------------------------------------------------------------------

##### `opinion_h1n1_vacc_effective`

-   `opinion_h1n1_vacc_effective` - Respondent's opinion about H1N1 vaccine effectiveness.
    -   `1` = Not at all effective
    -   `2` = Not very effective
    -   `3` = Don't know
    -   `4` = Somewhat effective
    -   `5` = Very effective

```{r}
test_set_features |>
  distinct(
    opinion_h1n1_vacc_effective
  )
```

```{r}

opinion_h1n1_vacc_effective_levels <- c(
    'Not at all effective'
    ,'Not very effective'
    ,'Don’t know'
    ,'Somewhat effective'
    ,'Very effective'
) 

test_set_features <- 
  test_set_features |>
  mutate(
    opinion_h1n1_vacc_effective = 
      case_when (
        opinion_h1n1_vacc_effective == 1 ~ 'Not at all effective',
        opinion_h1n1_vacc_effective == 2 ~ 'Not very effective',
        opinion_h1n1_vacc_effective == 3 ~ 'Don’t know',
        opinion_h1n1_vacc_effective == 4 ~ 'Somewhat effective',
        opinion_h1n1_vacc_effective == 5 ~ 'Very effective',
        TRUE ~ as.character(opinion_h1n1_vacc_effective)
  )) |>
  mutate(opinion_h1n1_vacc_effective = 
           fct(
             opinion_h1n1_vacc_effective,
             levels = opinion_h1n1_vacc_effective_levels 
  ))
```

Check works:

```{r}
test_set_features |> 
  count(opinion_h1n1_vacc_effective)

levels(test_set_features$opinion_h1n1_vacc_effective)
```

------------------------------------------------------------------------

##### `opinion_h1n1_risk`

-   `opinion_h1n1_risk` - Respondent's opinion about risk of getting sick with H1N1 flu without vaccine.
    -   `1` = Very Low
    -   `2` = Somewhat low
    -   `3` = Don't know
    -   `4` = Somewhat high
    -   `5` = Very high

```{r}
test_set_features |>
  distinct(
    opinion_h1n1_risk
  )
```

```{r}

opinion_h1n1_risk_levels <- c(
       'Very Low',
       'Somewhat low',
       'Don’t know',
       'Somewhat high',
       'Very high'
) 

test_set_features <- 
  test_set_features |>
  mutate(
    opinion_h1n1_risk = 
      case_when (
       opinion_h1n1_risk  == 1 ~ 'Very Low',
       opinion_h1n1_risk  == 2 ~ 'Somewhat low',
       opinion_h1n1_risk  == 3 ~ 'Don’t know',
       opinion_h1n1_risk  == 4 ~ 'Somewhat high',
       opinion_h1n1_risk  == 5 ~ 'Very high',
       TRUE ~ as.character(opinion_h1n1_risk)
  )) |>
  mutate(opinion_h1n1_risk = 
           fct(
             opinion_h1n1_risk,
             levels = opinion_h1n1_risk_levels 
  ))
```

Check works:

```{r}
test_set_features |> 
  count(opinion_h1n1_risk)

levels(test_set_features$opinion_h1n1_risk)
```

------------------------------------------------------------------------

##### `opinion_h1n1_sick_from_vacc`

-   `opinion_h1n1_sick_from_vacc` - Respondent's worry of getting sick from taking H1N1 vaccine.
    -   `1` = Not at all worried
    -   `2` = Not very worried
    -   `3` = Don't know
    -   `4` = Somewhat worried
    -   `5` = Very worried

```{r}
test_set_features |>
  distinct(
    opinion_h1n1_sick_from_vacc 
  )
```

```{r}

opinion_h1n1_sick_from_vacc_levels <- c(
    'Not at all worried'
    ,'Not very worried'
    ,'Don’t know'
    ,'Somewhat worried'
    ,'Very worried'
) 

test_set_features <- 
  test_set_features |>
  mutate(
    opinion_h1n1_sick_from_vacc = 
      case_when (
        opinion_h1n1_sick_from_vacc == 1 ~ 'Not at all worried',
        opinion_h1n1_sick_from_vacc == 2 ~ 'Not very worried',
        opinion_h1n1_sick_from_vacc == 3 ~ 'Don’t know',
        opinion_h1n1_sick_from_vacc == 4 ~ 'Somewhat worried',
        opinion_h1n1_sick_from_vacc == 5 ~ 'Very worried',
        TRUE ~ as.character(opinion_h1n1_sick_from_vacc)
  )) |>
  mutate(
    opinion_h1n1_sick_from_vacc =
           fct(
              opinion_h1n1_sick_from_vacc,
              levels = opinion_h1n1_sick_from_vacc_levels
  ))
```

Check works:

```{r}
test_set_features |> 
  count(opinion_h1n1_sick_from_vacc)

levels(test_set_features$opinion_h1n1_sick_from_vacc)
```

------------------------------------------------------------------------

##### `opinion_seas_vacc_effective`

-   `opinion_seas_vacc_effective` - Respondent's opinion about seasonal flu vaccine effectiveness.
    -   `1` = Not at all effective
    -   `2` = Not very effective
    -   `3` = Don't know
    -   `4` = Somewhat effective
    -   `5` = Very effective

```{r}
test_set_features |>
  distinct(
    opinion_seas_vacc_effective 
  )
```

```{r}

opinion_seas_vacc_effective_levels <- c(
    'Not at all effective'
    ,'Not very effective'
    ,'Don’t know'
    ,'Somewhat effective'
    ,'Very effective'
) 

test_set_features <- 
  test_set_features |>
  mutate(
    opinion_seas_vacc_effective =
      case_when (
        opinion_seas_vacc_effective == 1 ~ 'Not at all effective',
        opinion_seas_vacc_effective == 2 ~ 'Not very effective',
        opinion_seas_vacc_effective == 3 ~ 'Don’t know',
        opinion_seas_vacc_effective == 4 ~ 'Somewhat effective',
        opinion_seas_vacc_effective == 5 ~ 'Very effective',
        TRUE ~ as.character(opinion_seas_vacc_effective)
  )) |>
  mutate(
    opinion_seas_vacc_effective = 
           fct(
              opinion_seas_vacc_effective,          
              levels = opinion_seas_vacc_effective_levels
  ))
```

Check works:

```{r}
test_set_features |> 
  count(opinion_seas_vacc_effective)

levels(test_set_features$opinion_seas_vacc_effective)
```

------------------------------------------------------------------------

##### `opinion_seas_risk`

-   `opinion_seas_risk` - Respondent's opinion about risk of getting sick with seasonal flu without vaccine.

    -   `1` = Very Low
    -   `2` = Somewhat low
    -   `3` = Don't know
    -   `4` = Somewhat high
    -   `5` = Very high

    ```{r}
    test_set_features |>
      distinct(
        opinion_seas_risk 
      )
    ```

```{r}

opinion_seas_risk_levels <- c(
    'Very Low'
    ,'Somewhat low'
    ,'Don’t know'
    ,'Somewhat high'
    ,'Very high'
) 

test_set_features <- 
  test_set_features |>
  mutate(
    opinion_seas_risk =
      case_when (
        opinion_seas_risk == 1 ~ 'Very Low',
        opinion_seas_risk == 2 ~ 'Somewhat low',
        opinion_seas_risk == 3 ~ 'Don’t know',
        opinion_seas_risk == 4 ~ 'Somewhat high',
        opinion_seas_risk == 5 ~ 'Very high',
        TRUE ~ as.character(opinion_seas_risk)
  )) |>
  mutate(
    opinion_seas_risk = 
           fct(
              opinion_seas_risk,
              levels = opinion_seas_risk_levels 
  ))
```

Check works:

```{r}
test_set_features |>
  count(opinion_seas_risk)

levels(test_set_features$opinion_seas_risk)
```

------------------------------------------------------------------------

##### `opinion_seas_sick_from_vacc`

-   `opinion_seas_sick_from_vacc` - Respondent's worry of getting sick from taking seasonal flu vaccine.
    -   `1` = Not at all worried
    -   `2` = Not very worried
    -   `3` = Don't know
    -   `4` = Somewhat worried
    -   `5` = Very worried

```{r}
test_set_features |>
  distinct(
    opinion_seas_sick_from_vacc  
  )
```

```{r}

opinion_seas_sick_from_vacc_levels <- c(
    'Not at all worried'
    ,'Not very worried'
    ,'Don’t know'
    ,'Somewhat worried'
    ,'Very worried'
) 

test_set_features <- 
  test_set_features |>
  mutate(
    opinion_seas_sick_from_vacc =
      case_when (
        opinion_seas_sick_from_vacc == 1 ~ 'Not at all worried',
        opinion_seas_sick_from_vacc == 2 ~ 'Not very worried',
        opinion_seas_sick_from_vacc == 3 ~ 'Don’t know',
        opinion_seas_sick_from_vacc == 4 ~ 'Somewhat worried',
        opinion_seas_sick_from_vacc == 5 ~ 'Very worried',
        TRUE ~ as.character(opinion_seas_sick_from_vacc)  
  )) |>
  mutate(
    opinion_seas_sick_from_vacc =
           fct(
              opinion_seas_sick_from_vacc,  
              levels = opinion_seas_sick_from_vacc_levels
  ))
```

Check works:

```{r}
test_set_features |>
  count(opinion_seas_sick_from_vacc)

levels(test_set_features$opinion_seas_sick_from_vacc)
```

------------------------------------------------------------------------

##### `age_group`

`age_group` - Age group of respondent.

```{r}
test_set_features |>
  distinct(
    age_group
  )
```

```{r}

age_group_levels <- c(
  '18 - 34 Years'
  ,'35 - 44 Years'
  ,'45 - 54 Years'
  ,'55 - 64 Years'
  ,'65+ Years'
) 

test_set_features <- 
  test_set_features |>
  mutate(
    age_group =
           fct(
              age_group,  
              levels = age_group_levels
  ))
```

Check works:

```{r}
test_set_features |>
  count(age_group)

levels(test_set_features$age_group)
```

------------------------------------------------------------------------

##### `education`

`education` - Self-reported education level.

```{r}
test_set_features |>
  distinct(
   education 
  )
```

```{r}

education_levels <- c(
  '< 12 Years'
  ,'12 Years'
  ,'Some College'
  ,'College Graduate'
) 

test_set_features <- 
  test_set_features |>
  mutate(
    education =
           fct(
              education,  
              levels = education_levels
  ))
```

Check works:

```{r}
test_set_features |>
  count(education)

levels(test_set_features$education)
```

------------------------------------------------------------------------

##### `race`

`race` - Race of respondent.

```{r}
test_set_features |>
  distinct(
    race 
  )
```

```{r}

race_levels <- c(
  'Hispanic'
  ,'White'
  ,'Black'
  ,'Other or Multiple'
) 

test_set_features <- 
  test_set_features |>
  mutate(
    race =
           fct(
              race,  
              levels = race_levels
  ))
```

Check works:

```{r}
test_set_features |>
  count(race)

levels(test_set_features$race)
```

------------------------------------------------------------------------

##### `sex`

`sex` - Sex of respondent.

```{r}
test_set_features |>
  distinct(
    sex
  )
```

```{r}

sex_levels <- c(
  'Female'
  ,'Male'
) 

test_set_features <- 
  test_set_features |>
  mutate(
    sex =
           fct(
              sex,  
              levels = sex_levels
  ))
```

Check works:

```{r}
test_set_features |>
  count(sex)

levels(test_set_features$sex)
```

------------------------------------------------------------------------

##### `income_poverty`

`income_poverty` - Household annual income of respondent with respect to 2008 Census poverty thresholds.

```{r}
test_set_features |>
  distinct(
    income_poverty
  )
```

```{r}

income_poverty_levels <- c(
  'Below Poverty'
  ,'<= $75,000, Above Poverty'
  ,'> $75,000'
) 

test_set_features <- 
  test_set_features |>
  mutate(
    income_poverty =
           fct(
              income_poverty,  
              levels = income_poverty_levels
  ))
```

Check works:

```{r}
test_set_features |>
  count(income_poverty)

levels(test_set_features$income_poverty)
```

------------------------------------------------------------------------

##### `marital_status`

`marital_status` - Marital status of respondent.

```{r}
test_set_features |>
  distinct(
    marital_status 
  )
```

```{r}

marital_status_levels <- c(
  'Not Married'
  ,'Married'
) 

test_set_features <- 
  test_set_features |>
  mutate(
    marital_status =
           fct(
              marital_status,  
              levels = marital_status_levels
  ))
```

Check works:

```{r}
test_set_features |>
  count(marital_status)

levels(test_set_features$marital_status)
```

------------------------------------------------------------------------

##### `rent_or_own`

rent_or_own - Housing situation of respondent.

```{r}
test_set_features |>
  distinct(
    rent_or_own
  )
```

```{r}

rent_or_own_levels <- c(
  'Rent',
  'Own'
) 

test_set_features <- 
  test_set_features |>
  mutate(
    rent_or_own =
           fct(
              rent_or_own,  
              levels = rent_or_own_levels
  ))
```

Check works:

```{r}
test_set_features |>
  count(rent_or_own)

levels(test_set_features$rent_or_own)
```

------------------------------------------------------------------------

##### `employment_status`

`employment_status` - Employment status of respondent.

```{r}
test_set_features |>
  distinct(
    employment_status
  )
```

```{r}
employment_status_levels <- c(
  'Employed',
  'Not in Labor Force',
  'Unemployed'
) 

test_set_features <- 
  test_set_features |>
  mutate(
    employment_status =
           fct(
              employment_status,  
              levels = employment_status_levels
  ))
```

Check works:

```{r}
test_set_features |>
  count(employment_status)

levels(test_set_features$employment_status)
```

------------------------------------------------------------------------

##### `hhs_geo_region`

`hhs_geo_region` - Respondent’s residence using a 10-region geographic classification defined by the U.S. Dept. of Health and Human Services. Values are represented as short random character strings.

```{r}
test_set_features |>
  distinct(
    hhs_geo_region
  )
```

```{r}
hhs_geo_region_levels <- c(
  'mlyzmhmf'
  ,'bhuqouqj'
  ,'lrircsnp'
  ,'lzgpxyit'
  ,'fpwskwrf'
  ,'oxchjgsf'
  ,'dqpwygqj'
  ,'qufhixun'
  ,'kbazzjca'
  ,'atmpeygn'
) 

test_set_features <- 
  test_set_features |>
  mutate(
    hhs_geo_region =
           fct(
              hhs_geo_region,  
              levels = hhs_geo_region_levels 
  ))
```

Check works:

```{r}
test_set_features |>
  count(hhs_geo_region)

levels(test_set_features$hhs_geo_region)
```

------------------------------------------------------------------------

##### `census_msa`

`census_msa` - Respondent’s residence within metropolitan statistical areas (MSA) as defined by the U.S. Census.

```{r}
census_msa_levels <- 
  test_set_features |>
  distinct(
    census_msa
  ) |>
  unlist() |>
  na.omit()
```

It's best practice to not have `NA` as a factor level. The parquet file format will not work if there is a `NA` level in a factor.

```{r}
test_set_features <- 
  test_set_features |>
  mutate(
    census_msa =
           fct(
              census_msa,  
              levels = census_msa_levels
  )) 
```

Check works:

```{r}
test_set_features |>
  count(census_msa)

levels(test_set_features$census_msa)
```

------------------------------------------------------------------------

##### `employment_industry`

`employment_industry` - Type of industry respondent is employed in. Values are represented as short random character strings.

```{r}
employment_industry_levels <- 
  test_set_features |>
  distinct(
    employment_industry 
  ) |>
  unlist() |>
  na.omit()
```

It's best practice to not have `NA` as a factor level. The parquet file format will not work if there is a `NA` level in a factor.

```{r}
test_set_features <- 
  test_set_features |>
  mutate(
    employment_industry =
           fct(
              employment_industry,  
              levels = employment_industry_levels 
  )) 
```

Check works:

```{r}
test_set_features |>
  count(employment_industry)

levels(test_set_features$employment_industry)
```

------------------------------------------------------------------------

##### `employment_occupation`

`employment_occupation` - Type of occupation of respondent. Values are represented as short random character strings.

```{r}
employment_occupation_levels <- 
  test_set_features |>
  distinct(
    employment_occupation
  ) |>
  unlist() |>
  na.omit()
```

It's best practice to not have `NA` as a factor level. The parquet file format will not work if there is a `NA` level in a factor.

```{r}
test_set_features <- 
  test_set_features |>
  mutate(
    employment_occupation =
           fct(
              employment_occupation,  
              levels = employment_occupation_levels
  )) 
```

Check works:

```{r}
test_set_features |>
  count(employment_occupation)

levels(test_set_features$employment_occupation)
```

------------------------------------------------------------------------

```{r}
str(test_set_features)
```

------------------------------------------------------------------------

### `training_set_labels` Dataset

```{r}
spec(training_set_labels)
```

-   `respondent_id` will be `col_character()`, because doing arithmetic operations doesn't make sense on identifiers.
-   `h1n1_vaccine` and `seasonal_vaccine` will be `col_integer()`.

#### Setting Column Type for `training_set_labels` Dataset

```{r}
training_set_labels <- read_csv(
  "data/given_data/training_set_labels.csv",
  col_types = list(  
    respondent_id = col_character(),
    h1n1_vaccine = col_integer(),
    seasonal_vaccine = col_integer()
))
```

Double check that the format is correct:

```{r}
spec(training_set_labels)
```

Good.

------------------------------------------------------------------------

### `training_set_features` Dataset

```{r}
spec(training_set_features)
```

#### Setting Column Type for `training_set_features` Dataset

```{r}
training_set_features <- read_csv(
  "data/given_data/training_set_features.csv",
  col_types = list(  
    respondent_id = col_character(),
    h1n1_concern = col_integer(),
    h1n1_knowledge = col_integer(),
    behavioral_antiviral_meds = col_logical(),
    behavioral_avoidance = col_logical(),
    behavioral_face_mask = col_logical(),
    behavioral_wash_hands = col_logical(),
    behavioral_large_gatherings = col_logical(),
    behavioral_outside_home = col_logical(),
    behavioral_touch_face = col_logical(),
    doctor_recc_h1n1 = col_logical(),
    doctor_recc_seasonal = col_logical(),
    chronic_med_condition = col_logical(),
    child_under_6_months = col_logical(),
    health_worker = col_logical(),
    health_insurance = col_logical(),
    opinion_h1n1_vacc_effective = col_integer(),
    opinion_h1n1_risk = col_integer(),
    opinion_h1n1_sick_from_vacc = col_integer(),
    opinion_seas_vacc_effective = col_integer(),
    opinion_seas_risk = col_integer(),
    opinion_seas_sick_from_vacc = col_integer(),
    age_group = col_character(),
    education = col_character(),
    race = col_character(),
    sex = col_character(),
    income_poverty = col_character(),
    marital_status = col_character(),
    rent_or_own = col_character(),
    employment_status = col_character(),
    hhs_geo_region = col_character(),
    census_msa = col_character(),
    household_adults = col_integer(),
    household_children = col_integer(),
    employment_industry = col_character(),
    employment_occupation = col_character()
))
```

------------------------------------------------------------------------

#### Set up some factor levels for categorical variables:

##### `h1n1_concern`

-   `h1n1_concern` - Level of concern about the H1N1 flu.
    -   `0` = Not at all concerned
    -   `1` = Not very concerned
    -   `2` = Somewhat concerned
    -   `3` = Very concerned

```{r}
training_set_features |> distinct(h1n1_concern) 

h1n1_concern_levels <- c(
    'Not at all concerned'
    ,'Not very concerned'
    ,'Somewhat concerned'
    ,'Very concerned'
) 

training_set_features <- 
  training_set_features |>
  mutate(h1n1_concern = 
           case_when (
              h1n1_concern == 0 ~ 'Not at all concerned',
              h1n1_concern == 1 ~ 'Not very concerned',
              h1n1_concern == 2 ~ 'Somewhat concerned',
              h1n1_concern == 3 ~ 'Very concerned',
              TRUE ~ as.character(h1n1_concern)
  )) |>
  mutate(h1n1_concern = 
           fct(
             h1n1_concern,
             levels = h1n1_concern_levels
  ))
```

Check works:

```{r}
training_set_features |> count(h1n1_concern)

levels(training_set_features$h1n1_concern)
```

------------------------------------------------------------------------

##### `h1n1_knowledge`

-   `h1n1_knowledge` - Level of knowledge about H1N1 flu.

    -   `0` = No knowledge
    -   `1` = A little knowledge
    -   `2` = A lot of knowledge

    ```{r}
    training_set_features |> distinct(h1n1_knowledge) 

    h1n1_knowledge_levels <- c(
        'No knowledge'
        ,'A little knowledge'
        ,'A lot of knowledge'
    ) 

    training_set_features <- 
      training_set_features |>
      mutate(h1n1_knowledge = 
               case_when (
                  h1n1_knowledge == 0 ~ 'No knowledge',
                  h1n1_knowledge == 1 ~ 'A little knowledge',
                  h1n1_knowledge == 2 ~ 'A lot of knowledge',
                  TRUE ~ as.character(h1n1_knowledge)
      )) |>
      mutate(h1n1_knowledge = 
               fct(
                 h1n1_knowledge,
                 levels = h1n1_knowledge_levels
      ))
    ```

Check works:

```{r}
training_set_features |> count(h1n1_knowledge)

levels(training_set_features$h1n1_knowledge)
```

------------------------------------------------------------------------

##### `opinion_h1n1_vacc_effective`

-   `opinion_h1n1_vacc_effective` - Respondent's opinion about H1N1 vaccine effectiveness.
    -   `1` = Not at all effective
    -   `2` = Not very effective
    -   `3` = Don't know
    -   `4` = Somewhat effective
    -   `5` = Very effective

```{r}
training_set_features |>
  distinct(
    opinion_h1n1_vacc_effective
  )
```

```{r}

opinion_h1n1_vacc_effective_levels <- c(
    'Not at all effective'
    ,'Not very effective'
    ,'Don’t know'
    ,'Somewhat effective'
    ,'Very effective'
) 

training_set_features <- 
  training_set_features |>
  mutate(
    opinion_h1n1_vacc_effective = 
      case_when (
        opinion_h1n1_vacc_effective == 1 ~ 'Not at all effective',
        opinion_h1n1_vacc_effective == 2 ~ 'Not very effective',
        opinion_h1n1_vacc_effective == 3 ~ 'Don’t know',
        opinion_h1n1_vacc_effective == 4 ~ 'Somewhat effective',
        opinion_h1n1_vacc_effective == 5 ~ 'Very effective',
        TRUE ~ as.character(opinion_h1n1_vacc_effective)
  )) |>
  mutate(opinion_h1n1_vacc_effective = 
           fct(
             opinion_h1n1_vacc_effective,
             levels = opinion_h1n1_vacc_effective_levels 
  ))
```

Check works:

```{r}
training_set_features |> 
  count(opinion_h1n1_vacc_effective)

levels(training_set_features$opinion_h1n1_vacc_effective)
```

------------------------------------------------------------------------

##### `opinion_h1n1_risk`

-   `opinion_h1n1_risk` - Respondent's opinion about risk of getting sick with H1N1 flu without vaccine.
    -   `1` = Very Low
    -   `2` = Somewhat low
    -   `3` = Don't know
    -   `4` = Somewhat high
    -   `5` = Very high

```{r}
training_set_features |>
  distinct(
    opinion_h1n1_risk
  )
```

```{r}

opinion_h1n1_risk_levels <- c(
       'Very Low',
       'Somewhat low',
       'Don’t know',
       'Somewhat high',
       'Very high'
) 

training_set_features <- 
  training_set_features |>
  mutate(
    opinion_h1n1_risk = 
      case_when (
       opinion_h1n1_risk  == 1 ~ 'Very Low',
       opinion_h1n1_risk  == 2 ~ 'Somewhat low',
       opinion_h1n1_risk  == 3 ~ 'Don’t know',
       opinion_h1n1_risk  == 4 ~ 'Somewhat high',
       opinion_h1n1_risk  == 5 ~ 'Very high',
       TRUE ~ as.character(opinion_h1n1_risk)
  )) |>
  mutate(opinion_h1n1_risk = 
           fct(
             opinion_h1n1_risk,
             levels = opinion_h1n1_risk_levels 
  ))
```

Check works:

```{r}
training_set_features |> 
  count(opinion_h1n1_risk)

levels(training_set_features$opinion_h1n1_risk)
```

------------------------------------------------------------------------

##### `opinion_h1n1_sick_from_vacc`

-   `opinion_h1n1_sick_from_vacc` - Respondent's worry of getting sick from taking H1N1 vaccine.
    -   `1` = Not at all worried
    -   `2` = Not very worried
    -   `3` = Don't know
    -   `4` = Somewhat worried
    -   `5` = Very worried

```{r}
training_set_features |>
  distinct(
    opinion_h1n1_sick_from_vacc 
  )
```

```{r}

opinion_h1n1_sick_from_vacc_levels <- c(
    'Not at all worried'
    ,'Not very worried'
    ,'Don’t know'
    ,'Somewhat worried'
    ,'Very worried'
) 

training_set_features <- 
  training_set_features |>
  mutate(
    opinion_h1n1_sick_from_vacc = 
      case_when (
        opinion_h1n1_sick_from_vacc == 1 ~ 'Not at all worried',
        opinion_h1n1_sick_from_vacc == 2 ~ 'Not very worried',
        opinion_h1n1_sick_from_vacc == 3 ~ 'Don’t know',
        opinion_h1n1_sick_from_vacc == 4 ~ 'Somewhat worried',
        opinion_h1n1_sick_from_vacc == 5 ~ 'Very worried',
        TRUE ~ as.character(opinion_h1n1_sick_from_vacc)
  )) |>
  mutate(
    opinion_h1n1_sick_from_vacc =
           fct(
              opinion_h1n1_sick_from_vacc,
              levels = opinion_h1n1_sick_from_vacc_levels
  ))
```

Check works:

```{r}
training_set_features |> 
  count(opinion_h1n1_sick_from_vacc)

levels(training_set_features$opinion_h1n1_sick_from_vacc)
```

------------------------------------------------------------------------

##### `opinion_seas_vacc_effective`

-   `opinion_seas_vacc_effective` - Respondent's opinion about seasonal flu vaccine effectiveness.
    -   `1` = Not at all effective
    -   `2` = Not very effective
    -   `3` = Don't know
    -   `4` = Somewhat effective
    -   `5` = Very effective

```{r}
training_set_features |>
  distinct(
    opinion_seas_vacc_effective 
  )
```

```{r}

opinion_seas_vacc_effective_levels <- c(
    'Not at all effective'
    ,'Not very effective'
    ,'Don’t know'
    ,'Somewhat effective'
    ,'Very effective'
) 

training_set_features <- 
  training_set_features |>
  mutate(
    opinion_seas_vacc_effective =
      case_when (
        opinion_seas_vacc_effective == 1 ~ 'Not at all effective',
        opinion_seas_vacc_effective == 2 ~ 'Not very effective',
        opinion_seas_vacc_effective == 3 ~ 'Don’t know',
        opinion_seas_vacc_effective == 4 ~ 'Somewhat effective',
        opinion_seas_vacc_effective == 5 ~ 'Very effective',
        TRUE ~ as.character(opinion_seas_vacc_effective)
  )) |>
  mutate(
    opinion_seas_vacc_effective = 
           fct(
              opinion_seas_vacc_effective,          
              levels = opinion_seas_vacc_effective_levels
  ))
```

Check works:

```{r}
training_set_features |> 
  count(opinion_seas_vacc_effective)

levels(training_set_features$opinion_seas_vacc_effective)
```

------------------------------------------------------------------------

##### `opinion_seas_risk`

-   `opinion_seas_risk` - Respondent's opinion about risk of getting sick with seasonal flu without vaccine.

    -   `1` = Very Low
    -   `2` = Somewhat low
    -   `3` = Don't know
    -   `4` = Somewhat high
    -   `5` = Very high

    ```{r}
    training_set_features |>
      distinct(
        opinion_seas_risk 
      )
    ```

```{r}

opinion_seas_risk_levels <- c(
    'Very Low'
    ,'Somewhat low'
    ,'Don’t know'
    ,'Somewhat high'
    ,'Very high'
) 

training_set_features <- 
  training_set_features |>
  mutate(
    opinion_seas_risk =
      case_when (
        opinion_seas_risk == 1 ~ 'Very Low',
        opinion_seas_risk == 2 ~ 'Somewhat low',
        opinion_seas_risk == 3 ~ 'Don’t know',
        opinion_seas_risk == 4 ~ 'Somewhat high',
        opinion_seas_risk == 5 ~ 'Very high',
        TRUE ~ as.character(opinion_seas_risk)
  )) |>
  mutate(
    opinion_seas_risk = 
           fct(
              opinion_seas_risk,
              levels = opinion_seas_risk_levels 
  ))
```

Check works:

```{r}
training_set_features |>
  count(opinion_seas_risk)

levels(training_set_features$opinion_seas_risk)
```

------------------------------------------------------------------------

##### `opinion_seas_sick_from_vacc`

-   `opinion_seas_sick_from_vacc` - Respondent's worry of getting sick from taking seasonal flu vaccine.
    -   `1` = Not at all worried
    -   `2` = Not very worried
    -   `3` = Don't know
    -   `4` = Somewhat worried
    -   `5` = Very worried

```{r}
training_set_features |>
  distinct(
    opinion_seas_sick_from_vacc  
  )
```

```{r}

opinion_seas_sick_from_vacc_levels <- c(
    'Not at all worried'
    ,'Not very worried'
    ,'Don’t know'
    ,'Somewhat worried'
    ,'Very worried'
) 

training_set_features <- 
  training_set_features |>
  mutate(
    opinion_seas_sick_from_vacc =
      case_when (
        opinion_seas_sick_from_vacc == 1 ~ 'Not at all worried',
        opinion_seas_sick_from_vacc == 2 ~ 'Not very worried',
        opinion_seas_sick_from_vacc == 3 ~ 'Don’t know',
        opinion_seas_sick_from_vacc == 4 ~ 'Somewhat worried',
        opinion_seas_sick_from_vacc == 5 ~ 'Very worried',
        TRUE ~ as.character(opinion_seas_sick_from_vacc)  
  )) |>
  mutate(
    opinion_seas_sick_from_vacc =
           fct(
              opinion_seas_sick_from_vacc,  
              levels = opinion_seas_sick_from_vacc_levels
  ))
```

Check works:

```{r}
training_set_features |>
  count(opinion_seas_sick_from_vacc)

levels(training_set_features$opinion_seas_sick_from_vacc)
```

------------------------------------------------------------------------

##### `age_group`

`age_group` - Age group of respondent.

```{r}
training_set_features |>
  distinct(
    age_group
  )
```

```{r}

age_group_levels <- c(
  '18 - 34 Years'
  ,'35 - 44 Years'
  ,'45 - 54 Years'
  ,'55 - 64 Years'
  ,'65+ Years'
) 

training_set_features <- 
  training_set_features |>
  mutate(
    age_group =
           fct(
              age_group,  
              levels = age_group_levels
  ))
```

Check works:

```{r}
training_set_features |>
  count(age_group)

levels(training_set_features$age_group)
```

------------------------------------------------------------------------

##### `education`

`education` - Self-reported education level.

```{r}
training_set_features |>
  distinct(
   education 
  )
```

```{r}

education_levels <- c(
  '< 12 Years'
  ,'12 Years'
  ,'Some College'
  ,'College Graduate'
) 

training_set_features <- 
  training_set_features |>
  mutate(
    education =
           fct(
              education,  
              levels = education_levels
  ))
```

Check works:

```{r}
training_set_features |>
  count(education)

levels(training_set_features$education)
```

------------------------------------------------------------------------

##### `race`

`race` - Race of respondent.

```{r}
training_set_features |>
  distinct(
    race 
  )
```

```{r}

race_levels <- c(
  'Hispanic'
  ,'White'
  ,'Black'
  ,'Other or Multiple'
) 

training_set_features <- 
  training_set_features |>
  mutate(
    race =
           fct(
              race,  
              levels = race_levels
  ))
```

Check works:

```{r}
training_set_features |>
  count(race)

levels(training_set_features$race)
```

------------------------------------------------------------------------

##### `sex`

`sex` - Sex of respondent.

```{r}
training_set_features |>
  distinct(
    sex
  )
```

```{r}

sex_levels <- c(
  'Female'
  ,'Male'
) 

training_set_features <- 
  training_set_features |>
  mutate(
    sex =
           fct(
              sex,  
              levels = sex_levels
  ))
```

Check works:

```{r}
training_set_features |>
  count(sex)

levels(training_set_features$sex)
```

------------------------------------------------------------------------

##### `income_poverty`

`income_poverty` - Household annual income of respondent with respect to 2008 Census poverty thresholds.

```{r}
training_set_features |>
  distinct(
    income_poverty
  )
```

```{r}

income_poverty_levels <- c(
  'Below Poverty'
  ,'<= $75,000, Above Poverty'
  ,'> $75,000'
) 

training_set_features <- 
  training_set_features |>
  mutate(
    income_poverty =
           fct(
              income_poverty,  
              levels = income_poverty_levels
  ))
```

Check works:

```{r}
training_set_features |>
  count(income_poverty)

levels(training_set_features$income_poverty)
```

------------------------------------------------------------------------

##### `marital_status`

`marital_status` - Marital status of respondent.

```{r}
training_set_features |>
  distinct(
    marital_status 
  )
```

```{r}

marital_status_levels <- c(
  'Not Married'
  ,'Married'
) 

training_set_features <- 
  training_set_features |>
  mutate(
    marital_status =
           fct(
              marital_status,  
              levels = marital_status_levels
  ))
```

Check works:

```{r}
training_set_features |>
  count(marital_status)

levels(training_set_features$marital_status)
```

------------------------------------------------------------------------

##### `rent_or_own`

rent_or_own - Housing situation of respondent.

```{r}
training_set_features |>
  distinct(
    rent_or_own
  )
```

```{r}

rent_or_own_levels <- c(
  'Rent',
  'Own'
) 

training_set_features <- 
  training_set_features |>
  mutate(
    rent_or_own =
           fct(
              rent_or_own,  
              levels = rent_or_own_levels
  ))
```

Check works:

```{r}
training_set_features |>
  count(rent_or_own)

levels(training_set_features$rent_or_own)
```

------------------------------------------------------------------------

##### `employment_status`

`employment_status` - Employment status of respondent.

```{r}
training_set_features |>
  distinct(
    employment_status
  )
```

```{r}
employment_status_levels <- c(
  'Employed',
  'Not in Labor Force',
  'Unemployed'
) 

training_set_features <- 
  training_set_features |>
  mutate(
    employment_status =
           fct(
              employment_status,  
              levels = employment_status_levels
  ))
```

Check works:

```{r}
training_set_features |>
  count(employment_status)

levels(training_set_features$employment_status)
```

------------------------------------------------------------------------

##### `hhs_geo_region`

`hhs_geo_region` - Respondent’s residence using a 10-region geographic classification defined by the U.S. Dept. of Health and Human Services. Values are represented as short random character strings.

```{r}
training_set_features |>
  distinct(
    hhs_geo_region
  )
```

```{r}
hhs_geo_region_levels <- c(
  'mlyzmhmf'
  ,'bhuqouqj'
  ,'lrircsnp'
  ,'lzgpxyit'
  ,'fpwskwrf'
  ,'oxchjgsf'
  ,'dqpwygqj'
  ,'qufhixun'
  ,'kbazzjca'
  ,'atmpeygn'
) 

training_set_features <- 
  training_set_features |>
  mutate(
    hhs_geo_region =
           fct(
              hhs_geo_region,  
              levels = hhs_geo_region_levels 
  ))
```

Check works:

```{r}
training_set_features |>
  count(hhs_geo_region)

levels(training_set_features$hhs_geo_region)
```

------------------------------------------------------------------------

##### `census_msa`

`census_msa` - Respondent’s residence within metropolitan statistical areas (MSA) as defined by the U.S. Census.

```{r}
census_msa_levels <- 
  training_set_features |>
  distinct(
    census_msa
  ) |>
  unlist() |>
  na.omit()
```

It's best practice to not have `NA` as a factor level. The parquet file format will not work if there is a `NA` level in a factor.

```{r}
training_set_features <- 
  training_set_features |>
  mutate(
    census_msa =
           fct(
              census_msa,  
              levels = census_msa_levels
  )) 
```

Check works:

```{r}
training_set_features |>
  count(census_msa)

levels(training_set_features$census_msa)
```

------------------------------------------------------------------------

##### `employment_industry`

`employment_industry` - Type of industry respondent is employed in. Values are represented as short random character strings.

```{r}
employment_industry_levels <- 
  training_set_features |>
  distinct(
    employment_industry 
  ) |>
  unlist() |>
  na.omit()
```

It's best practice to not have `NA` as a factor level. The parquet file format will not work if there is a `NA` level in a factor.

```{r}
training_set_features <- 
  training_set_features |>
  mutate(
    employment_industry =
           fct(
              employment_industry,  
              levels = employment_industry_levels 
  )) 
```

Check works:

```{r}
training_set_features |>
  count(employment_industry)

levels(training_set_features$employment_industry)
```

------------------------------------------------------------------------

##### `employment_occupation`

`employment_occupation` - Type of occupation of respondent. Values are represented as short random character strings.

```{r}
employment_occupation_levels <- 
  training_set_features |>
  distinct(
    employment_occupation
  ) |>
  unlist() |>
  na.omit()
```

It's best practice to not have `NA` as a factor level. The parquet file format will not work if there is a `NA` level in a factor.

```{r}
training_set_features <- 
  training_set_features |>
  mutate(
    employment_occupation =
           fct(
              employment_occupation,  
              levels = employment_occupation_levels
  )) 
```

Check works:

```{r}
training_set_features |>
  count(employment_occupation)

levels(training_set_features$employment_occupation)
```

------------------------------------------------------------------------

# Combine the `training_set_labels` and `training_set_features` dataset together.

### check to make sure the keys are unique

Count the primary keys and look for entries where `n` is greater than one:

```{r}
training_set_features |>
  count(respondent_id) |>
  filter(n > 1)

training_set_labels |>
  count(respondent_id) |>
  filter(n > 1)
```

Good, there are none so `respondent_id` uniquely identifies rows in both data sets.

### Check if there are missing value for keys

```{r}
training_set_features |>
  filter(is.na(respondent_id))

training_set_labels |>
  filter(is.na(respondent_id))
```

Good, there are no rows with missing primary keys. We can identify each rows/observations in both data set.

### Join the dataset with an Inner Join

```{r}
training_set <-
  training_set_labels |>
  inner_join(training_set_features, join_by(respondent_id))
```

------------------------------------------------------------------------

# Storing the cleaned datasets

I'm going to store it in a better data format than CSV.

```{r}
library(arrow)
```

## Make sure the data set are formatted correctly

```{r}
training_set |>
  glimpse()

training_set_labels |>
  glimpse()

training_set_features |>
  glimpse()

test_set_features |>
  glimpse()

submission_format |>
  glimpse()
```

## Storing in Parquet file format

### `training_set_labels`

```{r}
mainDir <- 'data/cleaned_data'
subDir <- 'training_set_labels'
training_set_labels_path <- file.path(mainDir, subDir)
training_set_labels_path |>
  dir.create(showWarnings = FALSE)
```

```{r}
training_set_labels |>
  write_dataset(
    path = training_set_labels_path, 
    format = "parquet"
  )
```

```{r}
training_set_labels_pq <- 
  read_parquet(
    paste(training_set_labels_path,"part-0.parquet", sep = "/"))
```

### `training_set_features`

```{r}
mainDir <- 'data/cleaned_data'
subDir <- 'training_set_features'
training_set_features_path <- file.path(mainDir, subDir)
training_set_features_path |>
  dir.create(showWarnings = FALSE)
```

```{r}
training_set_features |>
  write_dataset(
    path = training_set_features_path, 
    format = "parquet"
  )
```

```{r}
training_set_features_pq <- 
  read_parquet(
    paste(training_set_features_path,"part-0.parquet", sep = "/"))
```

### `training_set`

```{r}
mainDir <- 'data/cleaned_data'
subDir <- 'training_set'
training_set_path <- file.path(mainDir, subDir) 
training_set_path |>
  dir.create(showWarnings = FALSE)
```

```{r}
training_set_features |>
  write_dataset(
    path = training_set_path, 
    format = "parquet"
  )
```

```{r}
training_set_pq <- 
  read_parquet(
    paste(training_set_path,"part-0.parquet", sep = "/"))
```

### `submission_format`

```{r}
mainDir <- 'data/cleaned_data'
subDir <- 'submission_format'
submission_format_path <- file.path(mainDir, subDir) 
submission_format_path |>
  dir.create(showWarnings = FALSE)
```

```{r}
submission_format |>
  write_dataset(
    path = submission_format_path, 
    format = "parquet"
  )
```

```{r}
submission_format_pq <- 
  read_parquet(
    paste(submission_format_path,"part-0.parquet", sep = "/"))
```

### `test_set_features`

```{r}
mainDir <- 'data/cleaned_data'
subDir <- 'test_set_features'
test_set_features_path <- file.path(mainDir, subDir) 
test_set_features_path |>
  dir.create(showWarnings = FALSE)
```

```{r}
test_set_features |>
  write_dataset(
    path = test_set_features_path, 
    format = "parquet"
  )
```

```{r}
test_set_features_pq <- 
  read_parquet(
    paste(test_set_features_path,"part-0.parquet", sep = "/"))
```
